'use client'; import { useState } from 'react'; import { Job } from '@/app/jobs/page'; interface JobApplicationModalProps { job: Job; isOpen: boolean; onClose: () => void; onSubmit: (applicationData: any) => void; } export default function JobApplicationModal({ job, isOpen, onClose, onSubmit, }: JobApplicationModalProps) { const [currentStep, setCurrentStep] = useState(1); const [formData, setFormData] = useState({ // Personal Information fullName: '', email: '', phone: '', location: '', // Professional Information experience: '', currentRole: '', currentCompany: '', expectedSalary: '', noticePeriod: '', // Documents resume: null as File | null, coverLetter: '', // Additional Information portfolioUrl: '', linkedinUrl: '', githubUrl: '', // Questions whyInterested: '', availability: '', relocate: '', }); const [errors, setErrors] = useState<Record<string, string>>({}); if (!isOpen) return null; const handleInputChange = (field: string, value: string | File | null) => { setFormData((prev) => ({ ...prev, [field]: value })); if (errors[field]) { setErrors((prev) => ({ ...prev, [field]: '' })); } }; const validateStep = (step: number) => { const newErrors: Record<string, string> = {}; if (step === 1) { if (!formData.fullName.trim()) newErrors.fullName = 'Full name is required'; if (!formData.email.trim()) newErrors.email = 'Email is required'; if (!formData.phone.trim()) newErrors.phone = 'Phone number is required'; if (!formData.location.trim()) newErrors.location = 'Location is required'; } if (step === 2) { if (!formData.experience) newErrors.experience = 'Experience level is required'; if (!formData.expectedSalary) newErrors.expectedSalary = 'Expected salary is required'; if (!formData.noticePeriod) newErrors.noticePeriod = 'Notice period is required'; } if (step === 3) { if (!formData.resume) newErrors.resume = 'Resume is required'; } if (step === 4) { if (!formData.whyInterested.trim()) newErrors.whyInterested = 'Please explain why you are interested'; if (!formData.availability) newErrors.availability = 'Please specify your availability'; } setErrors(newErrors); return Object.keys(newErrors).length === 0; }; const handleNext = () => { if (validateStep(currentStep)) { setCurrentStep((prev) => Math.min(prev + 1, 4)); } }; const handlePrevious = () => { setCurrentStep((prev) => Math.max(prev - 1, 1)); }; const handleSubmit = () => { if (validateStep(currentStep)) { onSubmit(formData); onClose(); } }; const handleBackdropClick = (e: React.MouseEvent) => { if (e.target === e.currentTarget) { onClose(); } }; const steps = [ { number: 1, title: 'Personal Info', description: 'Basic information' }, { number: 2, title: 'Professional', description: 'Work experience' }, { number: 3, title: 'Documents', description: 'Resume & cover letter' }, { number: 4, title: 'Questions', description: 'Additional questions' }, { number: 5, title: 'Review', description: 'Review & submit' }, ]; return ( <div className="fixed inset-0 z-50 bg-black/50 backdrop-blur-custom flex items-center justify-center p-4" onClick={handleBackdropClick} data-oid="4mj_oxj" > <div className="bg-white rounded-2xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-hidden modal-enter" data-oid="g__fz-e" > {/* Header */} <div className="bg-gradient-to-r from-[hsl(196,80%,45%)] to-[hsl(175,70%,41%)] text-white p-6" data-oid="u7-:79u" > <div className="flex items-center justify-between" data-oid=":_cld:q"> <div data-oid="cdb907r"> <h1 className="text-2xl font-bold" data-oid="f2um9w:"> Apply for {job.title} </h1> <p className="text-blue-100" data-oid="hvol64i"> {job.company} â€¢ {job.location} </p> </div> <button onClick={onClose} className="p-2 hover:bg-white/20 rounded-full transition-colors" data-oid="yokom_." > <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" data-oid="at1lev8" > <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" data-oid="-18t_21" /> </svg> </button> </div> </div> {/* Progress Steps */} <div className="px-6 py-4 border-b border-gray-200" data-oid="4xxfqrx"> <div className="flex items-center justify-between" data-oid="r.86749"> {steps.map((step, index) => ( <div key={step.number} className="flex items-center" data-oid="u_s.i22"> <div className={`flex items-center justify-center w-10 h-10 rounded-full border-2 ${ currentStep >= step.number ? 'bg-[hsl(196,80%,45%)] border-[hsl(196,80%,45%)] text-white' : 'border-gray-300 text-gray-500' }`} data-oid="r8ao9a6" > {currentStep > step.number ? ( <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" data-oid="v:sxqpi" > <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" data-oid="ffjwa1v" /> </svg> ) : ( step.number )} </div> <div className="ml-3 hidden sm:block" data-oid="ihmwpov"> <div className={`text-sm font-medium ${ currentStep >= step.number ? 'text-[hsl(196,80%,45%)]' : 'text-gray-500' }`} data-oid="t98zv64" > {step.title} </div> <div className="text-xs text-gray-500" data-oid="l-567_1"> {step.description} </div> </div> {index < steps.length - 1 && ( <div className={`hidden sm:block w-16 h-0.5 ml-4 ${ currentStep > step.number ? 'bg-[hsl(196,80%,45%)]' : 'bg-gray-300' }`} data-oid="7lzds7g" /> )} </div> ))} </div> </div> {/* Form Content */} <div className="p-6 h-[calc(90vh-300px)] overflow-y-auto" data-oid="z5deh7i"> {currentStep === 1 && ( <div className="space-y-6" data-oid="tzwepkr"> <h2 className="text-xl font-semibold text-gray-800 mb-4" data-oid="u-zbz:i" > Personal Information </h2> <div className="grid grid-cols-1 md:grid-cols-2 gap-6" data-oid="fh_-yma" > <div data-oid=":6r932d"> <label className="block text-sm font-medium text-gray-700 mb-2" data-oid="3pmrsj-" > Full Name * </label> <input type="text" value={formData.fullName} onChange={(e) => handleInputChange('fullName', e.target.value) } className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-[hsl(196,80%,45%)] ${ errors.fullName ? 'border-red-500' : 'border-gray-300' }`} placeholder="Enter your full name" data-oid="_el92d_" /> {errors.fullName && ( <p className="text-red-500 text-sm mt-1" data-oid="kcgi:bz"> {errors.fullName} </p> )} </div> <div data-oid="y4bises"> <label className="block text-sm font-medium text-gray-700 mb-2" data-oid="qd5:9--" > Email Address * </label> <input type="email" value={formData.email} onChange={(e) => handleInputChange('email', e.target.value)} className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-[hsl(196,80%,45%)] ${ errors.email ? 'border-red-500' : 'border-gray-300' }`} placeholder="Enter your email address" data-oid="d-hqxwb" /> {errors.email && ( <p className="text-red-500 text-sm mt-1" data-oid="9hnm_ct"> {errors.email} </p> )} </div> <div data-oid="d6moq3-"> <label className="block text-sm font-medium text-gray-700 mb-2" data-oid="ytu6kyj" > Phone Number * </label> <input type="tel" value={formData.phone} onChange={(e) => handleInputChange('phone', e.target.value)} className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-[hsl(196,80%,45%)] ${ errors.phone ? 'border-red-500' : 'border-gray-300' }`} placeholder="Enter your phone number" data-oid=":ek8nxt" /> {errors.phone && ( <p className="text-red-500 text-sm mt-1" data-oid="zjwiejy"> {errors.phone} </p> )} </div> <div data-oid="y40_zz5"> <label className="block text-sm font-medium text-gray-700 mb-2" data-oid="nrveynz" > Current Location * </label> <input type="text" value={formData.location} onChange={(e) => handleInputChange('location', e.target.value) } className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-[hsl(196,80%,45%)] ${ errors.location ? 'border-red-500' : 'border-gray-300' }`} placeholder="Enter your current location" data-oid="z8.io5g" /> {errors.location && ( <p className="text-red-500 text-sm mt-1" data-oid="wii5iyc"> {errors.location} </p> )} </div> </div> </div> )} {currentStep === 2 && ( <div className="space-y-6" data-oid="40uc4oz"> <h2 className="text-xl font-semibold text-gray-800 mb-4" data-oid="s0qdkal" > Professional Information </h2> <div className="grid grid-cols-1 md:grid-cols-2 gap-6" data-oid=".2z7cpr" > <div data-oid="ordt846"> <label className="block text-sm font-medium text-gray-700 mb-2" data-oid="ny3.qns" > Experience Level * </label> <select value={formData.experience} onChange={(e) => handleInputChange('experience', e.target.value) } className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-[hsl(196,80%,45%)] ${ errors.experience ? 'border-red-500' : 'border-gray-300' }`} data-oid="j3napk6" > <option value="" data-oid=".nzahf1"> Select experience level </option> <option value="0-1 years" data-oid="pc7r5t1"> Fresher (0-1 years) </option> <option value="1-3 years" data-oid="4c:tff6"> Junior (1-3 years) </option> <option value="3-5 years" data-oid="8w.bjd6"> Mid-level (3-5 years) </option> <option value="5+ years" data-oid="5iu8s27"> Senior (5+ years) </option> </select> {errors.experience && ( <p className="text-red-500 text-sm mt-1" data-oid="v45gd7z"> {errors.experience} </p> )} </div> <div data-oid="sz5o8b9"> <label className="block text-sm font-medium text-gray-700 mb-2" data-oid="40n03wp" > Current Role </label> <input type="text" value={formData.currentRole} onChange={(e) => handleInputChange('currentRole', e.target.value) } className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[hsl(196,80%,45%)]" placeholder="Enter your current role" data-oid="hbwiz.9" /> </div> <div data-oid="8ozug9u"> <label className="block text-sm font-medium text-gray-700 mb-2" data-oid="2d0m_8y" > Current Company </label> <input type="text" value={formData.currentCompany} onChange={(e) => handleInputChange('currentCompany', e.target.value) } className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[hsl(196,80%,45%)]" placeholder="Enter your current company" data-oid="3:nk8:." /> </div> <div data-oid="2-ztci6"> <label className="block text-sm font-medium text-gray-700 mb-2" data-oid="x-ijxfc" > Expected Salary (LPA) * </label> <select value={formData.expectedSalary} onChange={(e) => handleInputChange('expectedSalary', e.target.value) } className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-[hsl(196,80%,45%)] ${ errors.expectedSalary ? 'border-red-500' : 'border-gray-300' }`} data-oid="wg3jvs6" > <option value="" data-oid=".bhunim"> Select expected salary </option> <option value="0-5" data-oid="gn0_wuy"> â‚¹0-5 LPA </option> <option value="5-10" data-oid="cdc9aew"> â‚¹5-10 LPA </option> <option value="10-20" data-oid="6zxixpx"> â‚¹10-20 LPA </option> <option value="20+" data-oid=":d1tozx"> â‚¹20+ LPA </option> </select> {errors.expectedSalary && ( <p className="text-red-500 text-sm mt-1" data-oid="n97i85k"> {errors.expectedSalary} </p> )} </div> <div className="md:col-span-2" data-oid="q3xcxla"> <label className="block text-sm font-medium text-gray-700 mb-2" data-oid="cu.brn5" > Notice Period * </label> <select value={formData.noticePeriod} onChange={(e) => handleInputChange('noticePeriod', e.target.value) } className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-[hsl(196,80%,45%)] ${ errors.noticePeriod ? 'border-red-500' : 'border-gray-300' }`} data-oid="l7hi6jg" > <option value="" data-oid="4_7vx0_"> Select notice period </option> <option value="Immediate" data-oid="y2.0nq8"> Immediate </option> <option value="15 days" data-oid=".tckxjz"> 15 days </option> <option value="1 month" data-oid="sft-q5h"> 1 month </option> <option value="2 months" data-oid="n-qr9ee"> 2 months </option> <option value="3 months" data-oid="9l1jfd-"> 3 months </option> </select> {errors.noticePeriod && ( <p className="text-red-500 text-sm mt-1" data-oid="n6h-r45"> {errors.noticePeriod} </p> )} </div> </div> </div> )} {currentStep === 3 && ( <div className="space-y-6" data-oid="wtey_g1"> <h2 className="text-xl font-semibold text-gray-800 mb-4" data-oid="irdyst_" > Documents & Portfolio </h2> <div className="space-y-6" data-oid="z0wvbby"> <div data-oid="p-xrc:g"> <label className="block text-sm font-medium text-gray-700 mb-2" data-oid="xbysrxq" > Resume/CV * </label> <div className={`border-2 border-dashed rounded-lg p-6 text-center ${ errors.resume ? 'border-red-500' : 'border-gray-300' }`} data-oid="3vmvn6." > <input type="file" accept=".pdf,.doc,.docx" onChange={(e) => handleInputChange( 'resume', e.target.files?.[0] || null, ) } className="hidden" id="resume-upload" data-oid="uvlmm6c" /> <label htmlFor="resume-upload" className="cursor-pointer" data-oid="6lsj352" > <div className="text-gray-600" data-oid="czfa4db"> <svg className="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48" data-oid="9nxg-p4" > <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" data-oid="olnzn1l" /> </svg> <p className="mt-2 text-sm" data-oid="med:6fa"> <span className="font-medium text-[hsl(196,80%,45%)]" data-oid="q6h1vkp" > Click to upload </span>{' '} or drag and drop </p> <p className="text-xs text-gray-500" data-oid="2h40du-" > PDF, DOC, DOCX up to 10MB </p> </div> </label> {formData.resume && ( <p className="mt-2 text-sm text-green-600" data-oid="-510uys" > âœ“ {formData.resume.name} </p> )} </div> {errors.resume && ( <p className="text-red-500 text-sm mt-1" data-oid="iwhc2p1"> {errors.resume} </p> )} </div> <div data-oid="duoi9_-"> <label className="block text-sm font-medium text-gray-700 mb-2" data-oid="cxx15mk" > Cover Letter </label> <textarea value={formData.coverLetter} onChange={(e) => handleInputChange('coverLetter', e.target.value) } rows={4} className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[hsl(196,80%,45%)]" placeholder="Write a brief cover letter explaining why you're interested in this position..." data-oid="sa0ez3b" /> </div> <div className="grid grid-cols-1 md:grid-cols-3 gap-6" data-oid="3uznokt" > <div data-oid="ybb333d"> <label className="block text-sm font-medium text-gray-700 mb-2" data-oid="e:o2jhd" > Portfolio URL </label> <input type="url" value={formData.portfolioUrl} onChange={(e) => handleInputChange('portfolioUrl', e.target.value) } className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[hsl(196,80%,45%)]" placeholder="https://yourportfolio.com" data-oid="357d.2m" /> </div> <div data-oid="uonz7uj"> <label className="block text-sm font-medium text-gray-700 mb-2" data-oid="a:fbiza" > LinkedIn Profile </label> <input type="url" value={formData.linkedinUrl} onChange={(e) => handleInputChange('linkedinUrl', e.target.value) } className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[hsl(196,80%,45%)]" placeholder="https://linkedin.com/in/yourprofile" data-oid="k8:d.in" /> </div> <div data-oid="kzc-php"> <label className="block text-sm font-medium text-gray-700 mb-2" data-oid="jizitc:" > GitHub Profile </label> <input type="url" value={formData.githubUrl} onChange={(e) => handleInputChange('githubUrl', e.target.value) } className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[hsl(196,80%,45%)]" placeholder="https://github.com/yourusername" data-oid="sii4ln2" /> </div> </div> </div> </div> )} {currentStep === 4 && (
                        <div className="space-y-6">
                            <h2 className="text-xl font-semibold text-gray-800 mb-4">Additional Questions</h2>
                            
                            <div className="space-y-6">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2">
                                        Why are you interested in this position? *
                                    </label>
                                    <textarea
                                        value={formData.whyInterested}
                                        onChange={(e) => handleInputChange('whyInterested', e.target.value)}
                                        rows={4}
                                        className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-[hsl(196,80%,45%)] ${
                                            errors.whyInterested ? 'border-red-500' : 'border-gray-300'
                                        }`}
                                        placeholder="Tell us what excites you about this role and how it aligns with your career goals..."
                                    />
                                    {errors.whyInterested && <p className="text-red-500 text-sm mt-1">{errors.whyInterested}</p>}
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2">
                                        When can you start? *
                                    </label>
                                    <select
                                        value={formData.availability}
                                        onChange={(e) => handleInputChange('availability', e.target.value)}
                                        className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-[hsl(196,80%,45%)] ${
                                            errors.availability ? 'border-red-500' : 'border-gray-300'
                                        }`}
                                    >
                                        <option value="">Select your availability</option>
                                        <option value="Immediately">Immediately</option>
                                        <option value="Within 1 week">Within 1 week</option>
                                        <option value="Within 2 weeks">Within 2 weeks</option>
                                        <option value="Within 1 month">Within 1 month</option>
                                        <option value="After notice period">After notice period</option>
                                    </select>
                                    {errors.availability && <p className="text-red-500 text-sm mt-1">{errors.availability}</p>}
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2">
                                        Are you willing to relocate for this position?
                                    </label>
                                    <div className="space-y-2">
                                        {[
                                            { value: 'Yes', label: 'Yes, I am willing to relocate' },
                                            { value: 'No', label: 'No, I prefer to work from current location' },
                                            { value: 'Maybe', label: 'Maybe, depending on the offer' },
                                        ].map((option) => (
                                            <label key={option.value} className="flex items-center">
                                                <input
                                                    type="radio"
                                                    name="relocate"
                                                    value={option.value}
                                                    checked={formData.relocate === option.value}
                                                    onChange={(e) => handleInputChange('relocate', e.target.value)}
                                                    className="mr-3 text-[hsl(196,80%,45%)] focus:ring-[hsl(196,80%,45%)]"
                                                />
                                                <span className="text-sm text-gray-700">{option.label}</span>
                                            </label>
                                        ))}
                                    </div>
                                </div>

                                {/* Job-specific questions */}
                                <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
                                    <h3 className="font-semibold text-gray-800 mb-4">Job-Specific Questions</h3>
                                    
                                    <div className="space-y-4">
                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 mb-2">
                                                Do you have experience with the required skills for this role?
                                            </label>
                                            <textarea
                                                rows={3}
                                                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[hsl(196,80%,45%)]"
                                                placeholder={`Please describe your experience with: ${job.skills.slice(0, 3).join(', ')}...`}
                                            />
                                        </div>

                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 mb-2">
                                                What interests you most about working at {job.company}?
                                            </label>
                                            <textarea
                                                rows={3}
                                                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[hsl(196,80%,45%)]"
                                                placeholder="Tell us what you know about our company and what excites you about joining our team..."
                                            />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}

                    {currentStep === 5 && ( <div className="space-y-6" data-oid="jl4mt50"> <h2 className="text-xl font-semibold text-gray-800 mb-4" data-oid="ht0vi8e" > Review Your Application </h2> <div className="bg-gray-50 rounded-lg p-6 space-y-4" data-oid="7u2wa4g"> <div className="grid grid-cols-1 md:grid-cols-2 gap-4" data-oid="3z5oowu" > <div data-oid="192j.h7"> <h3 className="font-medium text-gray-800" data-oid="i8ct9te" > Personal Information </h3> <p className="text-sm text-gray-600" data-oid="54vnll0"> {formData.fullName} </p> <p className="text-sm text-gray-600" data-oid="8qdf18e"> {formData.email} </p> <p className="text-sm text-gray-600" data-oid="y-fj4zw"> {formData.phone} </p> <p className="text-sm text-gray-600" data-oid="_6onro9"> {formData.location} </p> </div> <div data-oid="xz:hr5b"> <h3 className="font-medium text-gray-800" data-oid="sjocvf4" > Professional Information </h3> <p className="text-sm text-gray-600" data-oid="qd83fez"> Experience: {formData.experience} </p> <p className="text-sm text-gray-600" data-oid="lguvmoi"> Expected Salary: {formData.expectedSalary} </p> <p className="text-sm text-gray-600" data-oid="kw-brvx"> Notice Period: {formData.noticePeriod} </p> </div> </div> {formData.resume && ( <div data-oid="s1h8s0:"> <h3 className="font-medium text-gray-800" data-oid="k8mbsjr" > Documents </h3> <p className="text-sm text-gray-600" data-oid="-v8slh:"> Resume: {formData.resume.name} </p> </div> )} </div> <div className="bg-blue-50 border border-blue-200 rounded-lg p-4" data-oid="mdhieid" > <div className="flex" data-oid="yuxrc_r"> <div className="flex-shrink-0" data-oid="adi3md0"> <svg className="h-5 w-5 text-blue-400" fill="currentColor" viewBox="0 0 20 20" data-oid="svq8nk_" > <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" data-oid="ttk3c17" /> </svg> </div> <div className="ml-3" data-oid="1a.z2r:"> <h3 className="text-sm font-medium text-blue-800" data-oid="-7tto2a" > Application Submission </h3> <div className="mt-2 text-sm text-blue-700" data-oid="l6uquxe" > <p data-oid="onh6.8i"> By submitting this application, you agree to our terms and conditions. You will receive a confirmation email once your application is submitted. </p> </div> </div> </div> </div> </div> )} </div> {/* Footer */} <div className="border-t border-gray-200 p-6 bg-gray-50" data-oid="skv9bkv"> <div className="flex justify-between" data-oid="b._j-u1"> <button onClick={currentStep === 1 ? onClose : handlePrevious} className="px-6 py-3 border border-gray-300 text-gray-700 rounded-lg font-medium hover:bg-gray-100 transition-colors" data-oid="86lckx0" > {currentStep === 1 ? 'Cancel' : 'Previous'} </button> {currentStep < 4 ? ( <button onClick={handleNext} className="px-8 py-3 bg-gradient-to-r from-[hsl(196,80%,45%)] to-[hsl(175,70%,41%)] text-white rounded-lg font-medium hover:from-[hsl(196,80%,40%)] hover:to-[hsl(175,70%,36%)] transition-all duration-300" data-oid="mbj-8vs" > Next Step </button> ) : ( <button onClick={handleSubmit} className="px-8 py-3 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-lg font-medium hover:from-green-600 hover:to-green-700 transition-all duration-300" data-oid="ku8h72p" > Submit Application </button> )} </div> </div> </div> </div> ); }